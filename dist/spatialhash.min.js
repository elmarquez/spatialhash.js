/* Copyright (c) 2016 Davis Marques <davis.marques@unimelb.edu.au> (http://www.davismarques.com). Compiled 2016-04-07 10:04:42 */

window.SpatialHash=function(){"use strict";function getAABBCells(aabb,cellSize){var i,j,k,max,min,points=[];for(max={x:Math.ceil(aabb.max.x/cellSize)*cellSize,y:Math.ceil(aabb.max.y/cellSize)*cellSize,z:Math.ceil(aabb.max.z/cellSize)*cellSize},min={x:Math.floor(aabb.min.x/cellSize)*cellSize,y:Math.floor(aabb.min.y/cellSize)*cellSize,z:Math.floor(aabb.min.z/cellSize)*cellSize},i=min.x;i<max.x;i+=cellSize)for(j=min.y;j<max.y;j+=cellSize)for(k=min.z;k<max.z;k+=cellSize)points.push({x:i,y:j,z:k});return points}function getDistanceToPoint(plane,p){return getDotProduct(plane.normal,p)+plane.constant}function getDotProduct(v1,v2){return v1.x*v2.x+v1.y*v2.y+v1.z*v2.z}function getPositionEnvelope(pos,cellSize,conversionFactor){var x=Math.floor(pos.x*conversionFactor)*cellSize,y=Math.floor(pos.y*conversionFactor)*cellSize,z=Math.floor(pos.z*conversionFactor)*cellSize,min={x:x,y:y,z:z};x+=cellSize,y+=cellSize,z+=cellSize;var max={x:x,y:y,z:z};return{min:min,max:max}}function getUnboundedPositionHashKey(pos,conversionFactor){return Math.floor(pos.x*conversionFactor)+":"+Math.floor(pos.y*conversionFactor)+":"+Math.floor(pos.z*conversionFactor)}function intersectsBox(planes,box){var d1,d2,i,p1={x:0,y:0,z:0},p2={x:0,y:0,z:0};for(i=0;6>i;i++){var plane=planes[i];if(p1.x=plane.normal.x>0?box.min.x:box.max.x,p2.x=plane.normal.x>0?box.max.x:box.min.x,p1.y=plane.normal.y>0?box.min.y:box.max.y,p2.y=plane.normal.y>0?box.max.y:box.min.y,p1.z=plane.normal.z>0?box.min.z:box.max.z,p2.z=plane.normal.z>0?box.max.z:box.min.z,d1=getDistanceToPoint(plane,p1),d2=getDistanceToPoint(plane,p2),0>d1&&0>d2)return!1}return!0}function mergeArray(left,right){var merged=[].concat(left);return null!==right&&void 0!==right&&(Array.isArray(right)?merged=merged.concat(right):merged.push(right)),merged}function mergeFields(left,right){Object.keys(right).forEach(function(key){left.hasOwnProperty(key)?right[key].forEach(function(item){left[key].push(item)}):left[key]=right[key]})}function Index(config){config=config||{};var self=this;self.INDEXING_STRATEGY={BOUNDED:"getBoundedHashKey",UNBOUNDED:"getUnboundedHashKey"},self.MAX_WORKERS=16,self.cells={},self.cellSize=10,self.conversionFactor=-1,self.envelopes={},self.indexingStrategy=self.INDEXING_STRATEGY.UNBOUNDED,self.max=1e3,self.min=0,self.objects={},self.scripts={EVAL:"/vendor/parallel.js/lib/eval.js",THREE:"/vendor/three.js/three.js"},Object.keys(config).forEach(function(key){self[key]=config[key]}),self.conversionFactor=1/self.cellSize,self.getPositionHash=self[self.indexingStrategy],self.width=(self.max-self.min)/self.cellSize}return Index.prototype.clear=function(){this.cells={},this.objects={}},Index.prototype.getBoundedHashKey=function(pos){if(pos.x<0||pos.y<0||pos.z<0)throw new Error("Negative position value is not allowed");if(pos.x>this.max||pos.y>this.max||pos.z>this.max)throw new Error("Position is greater than MAX");if(pos.x<this.min||pos.y<this.min||pos.z<this.min)throw new Error("Position is less than MIN");return this.getUnboundedHashKey(pos)},Index.prototype.getCellsIntersectingAABB=function(aabb){var intersects={},self=this;return Object.keys(self.envelopes).forEach(function(cell){aabb.intersectsBox(self.envelopes[cell])&&(intersects[cell]=0)}),Object.keys(intersects)},Index.prototype.getCellsIntersectingFrustum=function(frustum){var opt,pa,planes=[],self=this;return new Promise(function(resolve,reject){frustum.planes.forEach(function(plane){planes.push({constant:plane.constant,normal:{x:plane.normal.x+0,y:plane.normal.y+0,z:plane.normal.z+0}})}),opt={env:{envelopes:self.envelopes,planes:planes},evalPath:self.scripts.EVAL},pa=new Parallel(Object.keys(self.envelopes),opt),pa.require(self.scripts.THREE).require({fn:getDistanceToPoint,name:"getDistanceToPoint"}).require({fn:getDotProduct,name:"getDotProduct"}).require({fn:intersectsBox,name:"intersectsBox"}).require({fn:mergeArray,name:"mergeArray"}),pa.map(function(key){return intersectsBox(global.env.planes,global.env.envelopes[key])?key:[]}).reduce(function(cell){var result=[];return result=mergeArray(result,cell[0]),result=mergeArray(result,cell[1])}).then(function(data,err){err?reject(err):resolve(data)})})},Index.prototype.getEntitiesIntersectingFrustum=function(frustum){var self=this;return new Promise(function(resolve,reject){self.getCellsIntersectingFrustum(frustum).then(function(keys){if(keys.length>0){var pa=new Parallel(keys,{env:{cells:self.cells}});pa.require({fn:mergeArray,name:"mergeArray"}),pa.map(function(key){var result=[];return global.env.cells[key]&&Array.isArray(global.env.cells[key])&&(result=[].concat(global.env.cells[key])),result}).reduce(function(objs){var result=[];return result=mergeArray(result,objs[0]),result=mergeArray(result,objs[1])}).then(function(data,err){err?reject(err):resolve(data)})}})})},Index.prototype.getEntitiesIntersectingScreenRectangle=function(rec){var p1=new THREE.Vector3(rec.min.x,rec.min.y,0),p2=new THREE.Vector3(rec.max.x,rec.max.y,1),aabb=(new THREE.Box3).setFromPoints([p1,p2]),self=this,entities=this.getAABBCellKeys(aabb).reduce(function(cells,key){return self.cells.hasOwnProperty(key)&&(cells[key]=key),cells},{});return Object.keys(entities)},Index.prototype.getUnboundedHashKey=function(pos,conversionFactor){return Math.floor(pos.x*conversionFactor)+":"+Math.floor(pos.y*conversionFactor)+":"+Math.floor(pos.z*conversionFactor)},Index.prototype.getVerticesIntersectingFrustum=function(frustum){var entities=this.getCellsIntersectingFrustum(frustum).reduce(function(intersects,cell){return cell.forEach(function(id){intersects[id]=0}),intersects},{});return Object.keys(entities)},Index.prototype.insert=function(id,index,aabb,metadata){var position,self=this,cells=self.getAABBCells(aabb).reduce(function(intersects,vertex){return position=self.getPositionHash(vertex),intersects[position]=self.getPositionEnvelope(vertex),intersects},{});Object.keys(cells).forEach(function(cell){self.envelopes[cell]=cells[cell],self.cells.hasOwnProperty(cell)||(self.cells[cell]=[]),self.cells[cell].push(id),self.objects.hasOwnProperty(id)||(self.objects[id]=[]),self.objects[id].push(cell)})},Index.prototype.insertAll=function(objs){var opts,p,count={objects:-1,faces:-1,edges:-1,vertices:-1},self=this;return Array.isArray(objs)||(objs=Object.keys(objs).reduce(function(list,key){return list.push(objs[key]),list},[])),new Promise(function(resolve,reject){0===objs.length&&resolve(count),objs.forEach(function(obj){obj.aabb&&obj.aabb.max&&obj.aabb.min||reject("Missing aabb",obj)}),opts={env:{cellSize:self.cellSize,conversionFactor:self.conversionFactor},evalPath:self.scripts.EVAL},p=new Parallel(objs,opts).require(self.scripts.THREE).require({fn:getAABBCells,name:"getAABBCells"}).require({fn:getPositionEnvelope,name:"getPositionEnvelope"}).require({fn:getUnboundedPositionHashKey,name:"getPositionHash"}).require({fn:mergeFields,name:"mergeFields"}),p.map(function(obj){var cells,position,record={cells:{},envelopes:{},objects:{}};return cells=getAABBCells(obj.aabb,global.env.cellSize).reduce(function(intersects,vertex){return position=getPositionHash(vertex,global.env.conversionFactor),intersects[position]=getPositionEnvelope(vertex,global.env.cellSize,global.env.conversionFactor),intersects},{}),Object.keys(cells).forEach(function(key){record.envelopes[key]=cells[key],record.cells.hasOwnProperty(key)||(record.cells[key]=[]),record.cells[key].push(obj.id),record.objects.hasOwnProperty(obj.id)||(record.objects[obj.id]=[]),record.objects[obj.id].push(key)}),record}).reduce(function(records){return mergeFields(records[0].cells,records[1].cells),Object.keys(records[1].envelopes).forEach(function(key){records[0].envelopes[key]=records[1].envelopes[key]}),mergeFields(records[0].objects,records[1].objects),records[0]}).then(function(data,err){err?reject(err):(self.cells=data.cells,self.envelopes=data.envelopes,self.objects=data.objects,resolve(count))})})},Index.prototype.intersects=function(aabb){var intersects=[],self=this;return Object.keys(self.envelopes).forEach(function(envelope){envelope.intersectsBox(aabb)&&intersects.push(envelope)}),intersects},Index.prototype.intersectsViewSelection=function(frustum,p1,p2){},Index.prototype.near=function(pos,radius,limit){limit=limit||1/0;(new THREE.Box3).setFromCenterAndSize(pos,radius)},Index.prototype.nearest=function(pos,limit){},Index.prototype.remove=function(id){var i,self=this;this.objects.hasOwnProperty(id)&&this.objects[id].forEach(function(cell){i=self.cells[cell].indexOf(id),i>-1&&self.cells[cell].splice(i,1)}),delete this.envelopes[id],delete this.objects[id]},Index}();
//# sourceMappingURL=spatialhash.min.js.map