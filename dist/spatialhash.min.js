/* Copyright (c) 2016 Davis Marques <davis.marques@unimelb.edu.au> (http://www.davismarques.com). Compiled 2016-02-25 11:02:08 */

"use strict";function SpatialHash(config){config=config||{};var self=this;self.INDEXING_STRATEGY={BOUNDED:"getBoundedHashKey",UNBOUNDED:"getUnboundedHashKey"},self.cells={},self.cellSize=10,self.conversionFactor=-1,self.envelopes={},self.indexingStrategy=self.INDEXING_STRATEGY.UNBOUNDED,self.max=1e3,self.min=0,self.objects={},Object.keys(config).forEach(function(key){self[key]=config[key]}),self.conversionFactor=1/self.cellSize,self.getPositionHash=self[self.indexingStrategy],self.width=(self.max-self.min)/self.cellSize}SpatialHash.prototype.clear=function(){this.cells={},this.objects={}},SpatialHash.prototype.getAABBCellKeys=function(aabb){var self=this;return this.getAABBCells(aabb).map(function(item){return self.getPositionHash(item)})},SpatialHash.prototype.getAABBCells=function(aabb){var i,j,k,points=[],max={x:Math.ceil(aabb.max.x/this.cellSize)*this.cellSize,y:Math.ceil(aabb.max.y/this.cellSize)*this.cellSize,z:Math.ceil(aabb.max.z/this.cellSize)*this.cellSize},min={x:Math.floor(aabb.min.x/this.cellSize)*this.cellSize,y:Math.floor(aabb.min.y/this.cellSize)*this.cellSize,z:Math.floor(aabb.min.z/this.cellSize)*this.cellSize};for(i=min.x;i<max.x;i+=this.cellSize)for(j=min.y;j<max.y;j+=this.cellSize)for(k=min.z;k<max.z;k+=this.cellSize)points.push(new THREE.Vector3(i,j,k));return points},SpatialHash.prototype.getBoundedHashKey=function(pos){if(pos.x<0||pos.y<0||pos.z<0)throw new Error("Negative position value is not allowed");if(pos.x>this.max||pos.y>this.max||pos.z>this.max)throw new Error("Position is greater than MAX");if(pos.x<this.min||pos.y<this.min||pos.z<this.min)throw new Error("Position is less than MIN");return this.getUnboundedHashKey(pos)},SpatialHash.prototype.getCellsIntersectingAABB=function(aabb){var intersects={},self=this;return Object.keys(self.envelopes).forEach(function(cell){aabb.intersectsBox(self.envelopes[cell])&&(intersects[cell]=0)}),Object.keys(intersects)},SpatialHash.prototype.getCellsIntersectingFrustum=function(frustum){var intersects={},self=this;return Object.keys(self.envelopes).forEach(function(cell){frustum.intersectsBox(self.envelopes[cell])&&(intersects[cell]=0)}),Object.keys(intersects)},SpatialHash.prototype.getDistance=function(p1,p2){return Array.isArray(p1)&&Array.isArray(p2)?(p1[2]=2===p1.length?0:p1[2],p2[2]=2===p2.length?0:p2[2],Math.sqrt(Math.pow(p2[2]-p1[2],2)+Math.pow(p2[1]-p1[1],2)+Math.pow(p2[0]-p1[0],2))):p1.distanceTo(p2)},SpatialHash.prototype.getEntitiesIntersectingFrustum=function(frustum){var uuid,self=this,entities=this.getCellsIntersectingFrustum(frustum).reduce(function(intersects,cell){return self.cells[cell].forEach(function(id){uuid=id.split(",")[0],intersects[uuid]=intersects.hasOwnProperty(uuid)?intersects[uuid]+1:0}),intersects},{});return Object.keys(entities)},SpatialHash.prototype.getEntitiesIntersectingScreenRectangle=function(rec){var p1=new THREE.Vector3(rec.min.x,rec.min.y,0),p2=new THREE.Vector3(rec.max.x,rec.max.y,1),aabb=(new THREE.Box3).setFromPoints([p1,p2]),self=this,entities=this.getAABBCellKeys(aabb).reduce(function(cells,key){return self.cells.hasOwnProperty(key)&&(cells[key]=key),cells},{});return Object.keys(entities)},SpatialHash.prototype.getPositionEnvelope=function(pos){var x=Math.floor(pos.x*this.conversionFactor)*this.cellSize,y=Math.floor(pos.y*this.conversionFactor)*this.cellSize,z=Math.floor(pos.z*this.conversionFactor)*this.cellSize,min=new THREE.Vector3(x,y,z);x+=this.cellSize,y+=this.cellSize,z+=this.cellSize;var max=new THREE.Vector3(x,y,z);return new THREE.Box3(min,max)},SpatialHash.prototype.getUnboundedHashKey=function(pos){return Math.floor(pos.x*this.conversionFactor)+":"+Math.floor(pos.y*this.conversionFactor)+":"+Math.floor(pos.z*this.conversionFactor)},SpatialHash.prototype.getVerticesIntersectingFrustum=function(frustum){var entities=this.getCellsIntersectingFrustum(frustum).reduce(function(intersects,cell){return cell.forEach(function(id){intersects[id]=0}),intersects},{});return Object.keys(entities)},SpatialHash.prototype.insert=function(id,index,aabb,metadata){var position,self=this,cells=self.getAABBCells(aabb).reduce(function(intersects,vertex){return position=self.getPositionHash(vertex),intersects[position]=self.getPositionEnvelope(vertex),intersects},{});Object.keys(cells).forEach(function(cell){self.envelopes[cell]=cells[cell],self.cells.hasOwnProperty(cell)||(self.cells[cell]=[]),self.cells[cell].push(id),self.objects.hasOwnProperty(id)||(self.objects[id]=[]),self.objects[id].push(cell)})},SpatialHash.prototype.intersects=function(aabb){var intersects=[],self=this;return Object.keys(self.envelopes).forEach(function(envelope){envelope.intersectsBox(aabb)&&intersects.push(envelope)}),intersects},SpatialHash.prototype.intersectsViewSelection=function(frustum,p1,p2){},SpatialHash.prototype.near=function(pos,radius,limit){limit=limit||1/0;(new THREE.Box3).setFromCenterAndSize(pos,radius)},SpatialHash.prototype.nearest=function(pos,limit){},SpatialHash.prototype.remove=function(id){var i,self=this;this.objects.hasOwnProperty(id)&&this.objects[id].forEach(function(cell){i=self.cells[cell].indexOf(id),i>-1&&self.cells[cell].splice(i,1)}),delete this.envelopes[id],delete this.objects[id]};
//# sourceMappingURL=spatialhash.min.js.map